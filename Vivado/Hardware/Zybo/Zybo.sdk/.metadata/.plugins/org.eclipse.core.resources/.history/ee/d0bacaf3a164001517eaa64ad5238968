/*******************************************************************************/
/*                                H E A D E R                                  */
/*******************************************************************************/
// File Name            : main.c
// Author               : Daniel Kampert
// Modified by          :
// Processor            : ARM Cortex-A9
// Evaluation Board     : Zybo
// Date                 : 25-12-2014

/*******************************************************************************/
/*                     U P D A T E   I N F O R M A T I O N                     */
/*******************************************************************************/

// Date             Changes
// -----------------------------------------------------------------------------
//

/*******************************************************************************/
/*                             I N C L U D E S                                 */
/*******************************************************************************/

#include "main.h"

/*******************************************************************************/
/*                                   M A I N                                   */
/*******************************************************************************/

int main (void)
{
	printf("\n");

	printf("Initialisiere GIC-Controller...\n");
	Interrupt_Enable(GIC_0);
	printf("Interrupt-Controller initialisiert!\n");

	printf("Initialisiere GPIO...\n");
	XGpio_CfgInitialize(&GpioPs, XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID), XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID)->BaseAddr);
	printf("GPIO initialisiert!\n");

	printf("Initialisiere FIFO...\n");
	FFT_FIFO_Init(FIFO_0, FIFO_1);
	printf("FIFO initialisiert!\n");

	printf("Aktiviere Daten-FIFO Interrupt...\n");
	FIFO_EnableInt(&Fifo_0);
	Setup_Interrupt(XPAR_FABRIC_AXI_FIFO_DATA_INTERRUPT_INTR, (XInterruptHandler)FifoHandler, &Fifo_0, 0xA0, 0x3);
	printf("Daten-FIFO Interrupt aktiviert!\n");

	printf("Aktiviere System-Interrupts...\n");
	Activate_Interrupts();
	printf("System-Interrupts aktiviert!\n");

	//printf("Initialisiere DMA...\n");
	//FFT_DMA_Init(DMA_0);
	//printf("DMA initialisiert!\n");

	printf("Sende FFT Konfiguration...\n");
	FFT_FIFO_SendConfig(&Fifo_1, &FFT_Config);
	printf("Konfiguration abgeschlossen!\n");

	printf("\n");
	printf("--Lets go...--\n");
	printf("Generating Sample...\n");

	for(Zaehler = 0; Zaehler < FFT_LENGTH * 2; Zaehler = Zaehler + 2)
	{
		SendBuffer[Zaehler] = sin(2 * M_PI * Zaehler / (2 * FFT_LENGTH));
		SendBuffer[Zaehler + 1] = 0.0;
	}

	printf("Starte DMA-Transfer...\n");
	//DMA_Transfer((u32 *)SendBuffer, (u32 *)ReceiveBuffer, 2 * FFT_LENGTH);
	printf("Transfer abgeschlossen\n");

	printf("Compute FFT...\n");
	Status = FFT_FIFO_Run(&Fifo_0, (u32 *)SendBuffer, (u32 *)ReceiveBuffer, FFT_LENGTH);
	printf("Empfangene Pakete: %i\n", Status);
	FFT_PrintResult();

	return 0;
}
