/* Generated automatically by the program `genattr-common'
   from the machine description file `md'.  */

#ifndef GCC_INSN_ATTR_COMMON_H
#define GCC_INSN_ATTR_COMMON_H

enum attr_nonce_enabled {NONCE_ENABLED_NO, NONCE_ENABLED_YES};
enum attr_ce_enabled {CE_ENABLED_NO, CE_ENABLED_YES};
enum attr_tune {TUNE_ARM2, TUNE_ARM250, TUNE_ARM3, TUNE_ARM6, TUNE_ARM60, TUNE_ARM600, TUNE_ARM610, TUNE_ARM620, TUNE_ARM7, TUNE_ARM7D, TUNE_ARM7DI, TUNE_ARM70, TUNE_ARM700, TUNE_ARM700I, TUNE_ARM710, TUNE_ARM720, TUNE_ARM710C, TUNE_ARM7100, TUNE_ARM7500, TUNE_ARM7500FE, TUNE_ARM7M, TUNE_ARM7DM, TUNE_ARM7DMI, TUNE_ARM8, TUNE_ARM810, TUNE_STRONGARM, TUNE_STRONGARM110, TUNE_STRONGARM1100, TUNE_STRONGARM1110, TUNE_FA526, TUNE_FA626, TUNE_ARM7TDMI, TUNE_ARM7TDMIS, TUNE_ARM710T, TUNE_ARM720T, TUNE_ARM740T, TUNE_ARM9, TUNE_ARM9TDMI, TUNE_ARM920, TUNE_ARM920T, TUNE_ARM922T, TUNE_ARM940T, TUNE_EP9312, TUNE_ARM10TDMI, TUNE_ARM1020T, TUNE_ARM9E, TUNE_ARM946ES, TUNE_ARM966ES, TUNE_ARM968ES, TUNE_ARM10E, TUNE_ARM1020E, TUNE_ARM1022E, TUNE_XSCALE, TUNE_IWMMXT, TUNE_IWMMXT2, TUNE_FA606TE, TUNE_FA626TE, TUNE_FMP626, TUNE_FA726TE, TUNE_ARM926EJS, TUNE_ARM1026EJS, TUNE_ARM1136JS, TUNE_ARM1136JFS, TUNE_ARM1176JZS, TUNE_ARM1176JZFS, TUNE_MPCORENOVFP, TUNE_MPCORE, TUNE_ARM1156T2S, TUNE_ARM1156T2FS, TUNE_GENERICV7A, TUNE_CORTEXA5, TUNE_CORTEXA7, TUNE_CORTEXA8, TUNE_CORTEXA9, TUNE_CORTEXA15, TUNE_CORTEXR4, TUNE_CORTEXR4F, TUNE_CORTEXR5, TUNE_CORTEXM4, TUNE_CORTEXM3, TUNE_CORTEXM1, TUNE_CORTEXM0, TUNE_CORTEXM0PLUS, TUNE_MARVELL_PJ4};
enum attr_is_thumb {IS_THUMB_NO, IS_THUMB_YES};
enum attr_is_arch6 {IS_ARCH6_NO, IS_ARCH6_YES};
enum attr_is_thumb1 {IS_THUMB1_NO, IS_THUMB1_YES};
enum attr_fpu {FPU_NONE, FPU_VFP};
enum attr_arch {ARCH_ANY, ARCH_A, ARCH_T, ARCH_32, ARCH_T1, ARCH_T2, ARCH_V6, ARCH_NOV6, ARCH_ONLYA8, ARCH_NEON_ONLYA8, ARCH_NOTA8, ARCH_NEON_NOTA8, ARCH_IWMMXT, ARCH_IWMMXT2};
enum attr_arch_enabled {ARCH_ENABLED_NO, ARCH_ENABLED_YES};
enum attr_opt {OPT_ANY, OPT_SPEED, OPT_SIZE};
enum attr_opt_enabled {OPT_ENABLED_NO, OPT_ENABLED_YES};
enum attr_insn_enabled {INSN_ENABLED_NO, INSN_ENABLED_YES};
enum attr_enabled {ENABLED_NO, ENABLED_YES};
enum attr_insn {INSN_MOV, INSN_MVN, INSN_SMULXY, INSN_SMLAXY, INSN_SMLALXY, INSN_SMULWY, INSN_SMLAWX, INSN_MUL, INSN_MULS, INSN_MLA, INSN_MLAS, INSN_UMULL, INSN_UMULLS, INSN_UMLAL, INSN_UMLALS, INSN_SMULL, INSN_SMULLS, INSN_SMLAL, INSN_SMLALS, INSN_SMLAWY, INSN_SMUAD, INSN_SMUADX, INSN_SMLAD, INSN_SMLADX, INSN_SMUSD, INSN_SMUSDX, INSN_SMLSD, INSN_SMLSDX, INSN_SMMUL, INSN_SMMULR, INSN_SMMLA, INSN_UMAAL, INSN_SMLALD, INSN_SMLSLD, INSN_CLZ, INSN_MRS, INSN_MSR, INSN_XTAB, INSN_SDIV, INSN_UDIV, INSN_SAT, INSN_OTHER};
enum attr_type {TYPE_SIMPLE_ALU_IMM, TYPE_ALU_REG, TYPE_SIMPLE_ALU_SHIFT, TYPE_ALU_SHIFT, TYPE_ALU_SHIFT_REG, TYPE_MULT, TYPE_BLOCK, TYPE_FLOAT, TYPE_FDIVD, TYPE_FDIVS, TYPE_FMULS, TYPE_FMULD, TYPE_FMACS, TYPE_FMACD, TYPE_FFMAS, TYPE_FFMAD, TYPE_F_RINTS, TYPE_F_RINTD, TYPE_F_MINMAXS, TYPE_F_MINMAXD, TYPE_F_FLAG, TYPE_F_LOADS, TYPE_F_LOADD, TYPE_F_STORES, TYPE_F_STORED, TYPE_F_2_R, TYPE_R_2_F, TYPE_F_CVT, TYPE_BRANCH, TYPE_CALL, TYPE_LOAD_BYTE, TYPE_LOAD1, TYPE_LOAD2, TYPE_LOAD3, TYPE_LOAD4, TYPE_STORE1, TYPE_STORE2, TYPE_STORE3, TYPE_STORE4, TYPE_FCONSTS, TYPE_FCONSTD, TYPE_FADDS, TYPE_FADDD, TYPE_FFARITHS, TYPE_FFARITHD, TYPE_FCMPS, TYPE_FCMPD, TYPE_FCPYS};
enum attr_mul64 {MUL64_NO, MUL64_YES};
enum attr_wtype {WTYPE_NONE, WTYPE_WOR, WTYPE_WXOR, WTYPE_WAND, WTYPE_WANDN, WTYPE_WMOV, WTYPE_TMCRR, WTYPE_TMRRC, WTYPE_WLDR, WTYPE_WSTR, WTYPE_TMCR, WTYPE_TMRC, WTYPE_WADD, WTYPE_WSUB, WTYPE_WMUL, WTYPE_WMAC, WTYPE_WAVG2, WTYPE_TINSR, WTYPE_TEXTRM, WTYPE_WSHUFH, WTYPE_WCMPEQ, WTYPE_WCMPGT, WTYPE_WMAX, WTYPE_WMIN, WTYPE_WPACK, WTYPE_WUNPCKIH, WTYPE_WUNPCKIL, WTYPE_WUNPCKEH, WTYPE_WUNPCKEL, WTYPE_WROR, WTYPE_WSRA, WTYPE_WSRL, WTYPE_WSLL, WTYPE_WMADD, WTYPE_TMIA, WTYPE_TMIAPH, WTYPE_TMIAXY, WTYPE_TBCST, WTYPE_TMOVMSK, WTYPE_WACC, WTYPE_WALIGNI, WTYPE_WALIGNR, WTYPE_TANDC, WTYPE_TEXTRC, WTYPE_TORC, WTYPE_TORVSC, WTYPE_WSAD, WTYPE_WABS, WTYPE_WABSDIFF, WTYPE_WADDSUBHX, WTYPE_WSUBADDHX, WTYPE_WAVG4, WTYPE_WMULW, WTYPE_WQMULM, WTYPE_WQMULWM, WTYPE_WADDBHUS, WTYPE_WQMIAXY, WTYPE_WMIAXY, WTYPE_WMIAWXY, WTYPE_WMERGE};
enum attr_ldsched {LDSCHED_NO, LDSCHED_YES};
enum attr_neon_type {NEON_TYPE_NEON_INT_1, NEON_TYPE_NEON_INT_2, NEON_TYPE_NEON_INT_3, NEON_TYPE_NEON_INT_4, NEON_TYPE_NEON_INT_5, NEON_TYPE_NEON_VQNEG_VQABS, NEON_TYPE_NEON_VMOV, NEON_TYPE_NEON_VABA, NEON_TYPE_NEON_VSMA, NEON_TYPE_NEON_VABA_QQQ, NEON_TYPE_NEON_MUL_DDD_8_16_QDD_16_8_LONG_32_16_LONG, NEON_TYPE_NEON_MUL_QQQ_8_16_32_DDD_32, NEON_TYPE_NEON_MUL_QDD_64_32_LONG_QQD_16_DDD_32_SCALAR_64_32_LONG_SCALAR, NEON_TYPE_NEON_MLA_DDD_8_16_QDD_16_8_LONG_32_16_LONG, NEON_TYPE_NEON_MLA_QQQ_8_16, NEON_TYPE_NEON_MLA_DDD_32_QQD_16_DDD_32_SCALAR_QDD_64_32_LONG_SCALAR_QDD_64_32_LONG, NEON_TYPE_NEON_MLA_QQQ_32_QQD_32_SCALAR, NEON_TYPE_NEON_MUL_DDD_16_SCALAR_32_16_LONG_SCALAR, NEON_TYPE_NEON_MUL_QQD_32_SCALAR, NEON_TYPE_NEON_MLA_DDD_16_SCALAR_QDD_32_16_LONG_SCALAR, NEON_TYPE_NEON_SHIFT_1, NEON_TYPE_NEON_SHIFT_2, NEON_TYPE_NEON_SHIFT_3, NEON_TYPE_NEON_VSHL_DDD, NEON_TYPE_NEON_VQSHL_VRSHL_VQRSHL_QQQ, NEON_TYPE_NEON_VSRA_VRSRA, NEON_TYPE_NEON_FP_VADD_DDD_VABS_DD, NEON_TYPE_NEON_FP_VADD_QQQ_VABS_QQ, NEON_TYPE_NEON_FP_VSUM, NEON_TYPE_NEON_FP_VMUL_DDD, NEON_TYPE_NEON_FP_VMUL_QQD, NEON_TYPE_NEON_FP_VMLA_DDD, NEON_TYPE_NEON_FP_VMLA_QQQ, NEON_TYPE_NEON_FP_VMLA_DDD_SCALAR, NEON_TYPE_NEON_FP_VMLA_QQQ_SCALAR, NEON_TYPE_NEON_FP_VRECPS_VRSQRTS_DDD, NEON_TYPE_NEON_FP_VRECPS_VRSQRTS_QQQ, NEON_TYPE_NEON_BP_SIMPLE, NEON_TYPE_NEON_BP_2CYCLE, NEON_TYPE_NEON_BP_3CYCLE, NEON_TYPE_NEON_LDR, NEON_TYPE_NEON_STR, NEON_TYPE_NEON_VLD1_1_2_REGS, NEON_TYPE_NEON_VLD1_3_4_REGS, NEON_TYPE_NEON_VLD2_2_REGS_VLD1_VLD2_ALL_LANES, NEON_TYPE_NEON_VLD2_4_REGS, NEON_TYPE_NEON_VLD3_VLD4, NEON_TYPE_NEON_VST1_1_2_REGS_VST2_2_REGS, NEON_TYPE_NEON_VST1_3_4_REGS, NEON_TYPE_NEON_VST2_4_REGS_VST3_VST4, NEON_TYPE_NEON_VST3_VST4, NEON_TYPE_NEON_VLD1_VLD2_LANE, NEON_TYPE_NEON_VLD3_VLD4_LANE, NEON_TYPE_NEON_VST1_VST2_LANE, NEON_TYPE_NEON_VST3_VST4_LANE, NEON_TYPE_NEON_VLD3_VLD4_ALL_LANES, NEON_TYPE_NEON_MCR, NEON_TYPE_NEON_MCR_2_MCRR, NEON_TYPE_NEON_MRC, NEON_TYPE_NEON_MRRC, NEON_TYPE_NEON_LDM_2, NEON_TYPE_NEON_STM_2, NEON_TYPE_NONE};
enum attr_conds {CONDS_USE, CONDS_SET, CONDS_CLOB, CONDS_UNCONDITIONAL, CONDS_NOCOND};
enum attr_predicable {PREDICABLE_NO, PREDICABLE_YES};
enum attr_model_wbuf {MODEL_WBUF_NO, MODEL_WBUF_YES};
enum attr_write_conflict {WRITE_CONFLICT_NO, WRITE_CONFLICT_YES};
enum attr_core_cycles {CORE_CYCLES_SINGLE, CORE_CYCLES_MULTI};
enum attr_far_jump {FAR_JUMP_YES, FAR_JUMP_NO};
enum attr_tune_cortexr4 {TUNE_CORTEXR4_YES, TUNE_CORTEXR4_NO};
enum attr_generic_sched {GENERIC_SCHED_YES, GENERIC_SCHED_NO};
enum attr_generic_vfp {GENERIC_VFP_YES, GENERIC_VFP_NO};
enum attr_marvell_f_iwmmxt {MARVELL_F_IWMMXT_YES, MARVELL_F_IWMMXT_NO};
enum attr_wmmxt_shift {WMMXT_SHIFT_YES, WMMXT_SHIFT_NO};
enum attr_wmmxt_pack {WMMXT_PACK_YES, WMMXT_PACK_NO};
enum attr_wmmxt_mult_c1 {WMMXT_MULT_C1_YES, WMMXT_MULT_C1_NO};
enum attr_wmmxt_mult_c2 {WMMXT_MULT_C2_YES, WMMXT_MULT_C2_NO};
enum attr_wmmxt_alu_c1 {WMMXT_ALU_C1_YES, WMMXT_ALU_C1_NO};
enum attr_wmmxt_alu_c2 {WMMXT_ALU_C2_YES, WMMXT_ALU_C2_NO};
enum attr_wmmxt_alu_c3 {WMMXT_ALU_C3_YES, WMMXT_ALU_C3_NO};
enum attr_wmmxt_transfer_c1 {WMMXT_TRANSFER_C1_YES, WMMXT_TRANSFER_C1_NO};
enum attr_wmmxt_transfer_c2 {WMMXT_TRANSFER_C2_YES, WMMXT_TRANSFER_C2_NO};
enum attr_wmmxt_transfer_c3 {WMMXT_TRANSFER_C3_YES, WMMXT_TRANSFER_C3_NO};
enum attr_vfp10 {VFP10_YES, VFP10_NO};
enum attr_vqh_mnem {VQH_MNEM_VADD, VQH_MNEM_VMIN, VQH_MNEM_VMAX};
#define INSN_SCHEDULING

#endif /* GCC_INSN_ATTR_COMMON_H */
